{
  "openapi": "3.1.0",
  "info": {
    "title": "Public Accounts API",
    "version": "1.0",
    "summary": "View the details from this subbranch of the Public Developer API, including phasing stages and endpoints.",
    "contact": {
      "name": "Nathanna (a.k.a. \"Piggy\" or \"Tonya)",
      "url": "https://kelpstone.com/forums/players/pigerly/dm?from=apisite&subject=Your%20title%20here.%20%28API%20Inquiry%29&placeholder_2=Describe%20the%20problem%20with%20detail%20and%20show%20code%20or%20urls%20used%20to%20enduce%20the%20API%20erro.%20If%20your%20using%20a%20authorized%20API%2C%20theres%20no%20need%20to%20include%20the%20keys%20or%20values%2C%20unless%20your%20using%20someone%20elses%20Kelpauth%20account%2C%20it%20is%20linked%20to%20your%20Kelpforums%20account."
    },
    "termsOfService": "https://kelpstone.com/legal/policies/terms-of-service",
    "license": {
      "name": "GNU AGPLv3",
      "identifier": "AGPL-3.0-or-later"
    },
    "description": "Welcome to the first public facing API for the entire Kelpstone/Kelpcorp francise, including but not limited to, statistics, account data, achievements, quests, forums, linked accounts and so much more. Here are the details for this branch of the API.\n\n| Property     | Boolean |\n| ------------ | ------  |\n| Maintained   | True    |\n| Supported    | True    |\n| Trial Stage  | Alpha   |\n\n<p align=\"center\">Latest Phase Information: <a href=\"https://api.kelpstone.com/v1/\">AS JSON</a></p>"
  },
  "servers": [
    {
      "url": "http://api.kelpstone.com/public/v1",
      "description": "Primary"
    },
    {
      "url": "https://api.kelpstone.com/public/v1",
      "description": "Secondary (Primary SSL)"
    },
    {
      "url": "https://maintenance.kelpstone.com/api/v1",
      "description": "Maintenance Backup Cache (Previously Executed Requests Only)"
    }
  ],
  "components": {
    "securitySchemes": {
      "KelpauthÂ® App Tokens": {
        "name": "Authority",
        "type": "apiKey",
        "in": "header",
        "description": "### Only With The Signature\n**QUERY ONLY** - The signature paramater allows input of a string containing alphabetically formatted properties from the request, encrypted using your developer application's private key. The server generates a hash from the properties on the backend and verifies the signature before continuing with the exchange.\n#### Definition\nYou will need to use `?signature=` to supply your developer app's md5-encoded signature blob, and `?client=` to supply the public key. To read how to generate and format one go to the page [Security Signatures 101]() and follow the steps for your language.\n\n*Unlike user tokens, you may only supply one developer app token in a signature... for now. ðŸ˜‰*\n\n#### Distrobution\nIn order to get a developer app and the public and private key, you'll need to visit [dap.kelpstone.com (Developer App Portal)](http://dap.kelpstone.com?show=my_apps&tutorial=true), sign into your account and create an application with limited permissions. Unless you want to wait for approval, use the playground permission settings to experiment on your own account.\n\n#### Protocol\nTwo conjoining query additions that you provide when making API calls. Specify the developer app's public key in a query parameter called Client and the hash in a query parameter called Signature.\n\nExample: `?client=123&signature=202cb962ac59075b964b07152d234b70`\n\n### Adding User-Authorized Scopes\n**HEADER ONLY** - â€‹Optionally, you can add user authorized scoped bearer tokens. These allow developer applications to edit and acess private or secured information from or to a users profile, settings and content.\n\n#### Definition\nYou can use either `Authorities` or `Authority` to optionally suply user authorized developer app scope tokens. You can include as many tokens as you need, seperated by a comma. It does not matter which header name you use, both allow for one or more items.\n\n#### Distrobution\nIn order to get your developer app authorized for control over user account details, you'll need to prompt them first. Authorization methods include, prompting them to run a command ingame or redirecting them to an KelpAuth splash screen which allows them to grant the permisions. Both of which will return a token to the iniating api call's host.\n\n#### Protocol"
      }
    },
    "schemas": {},
    "requestBodies": {},
    "parameters": {}
  },
  "security": [
    {
      "KelpauthÂ® Developer Key - In Any Mode": []
    }
  ],
  "tags": [
    {
      "name": "v1"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "summary": "List All Stem Accounts",
        "responses": {
          "200": {
            "description": "(`OK`) Your request was approved, and all accessible data for your developer application's permissions was sent back to the querying client within the results property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Returns a list of all record identification numbers for member list purpouses.",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "../models/helpers/RecordNumber.json"
                      }
                    },
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                },
                "examples": {
                  "Example": {
                    "value": [
                      2838193,
                      3929319,
                      32891,
                      1,
                      119921,
                      291
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "(`Bad Request`) You are able to execute this action, but you didn't use the right property guide, or you are missing cruticial properties from the records you are referencing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "401": {
            "description": "(`Unauthorized`) You either, did not include the client id of your developer application, the encrypted signature of the request or a header with one or more user scope bearers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "403": {
            "description": "(`Forbidden`) You have all the necessary prerequisites, headers and tokens, but you are not authorized by the user to use this scope/action on their behalf.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          }
        },
        "operationId": "list-global-accounts",
        "description": "Returns a list of all record identification numbers, typically for internal member listing purpouses.\n\n*__Note:__ It does not include any other information, just the database record number. To search for a username or other information, see [SA RID From Query](https://www.www.com).*",
        "parameters": [
          {
            "$ref": "../models/helpers/parameters/Client.json"
          },
          {
            "$ref": "../models/helpers/parameters/Signature.json"
          },
          {
            "$ref": "../models/helpers/parameters/Authority.json"
          }
        ],
        "tags": [
          "Find & List Accounts"
        ]
      },
      "parameters": []
    },
    "/accounts/{record}": {
      "get": {
        "summary": "Fetch Stem Account",
        "responses": {
          "200": {
            "description": "(`OK`) Your request was approved, and all accessible data for your developer application's permissions was sent back to the querying client within the results property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "../models/global/StemAccount.json"
                    },
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "400": {
            "description": "(`Bad Request`) You are able to execute this action, but you didn't use the right property guide, or you are missing cruticial properties from the records you are referencing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "401": {
            "description": "(`Unauthorized`) You either, did not include the client id of your developer application, the encrypted signature of the request or a header with one or more user scope bearers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "403": {
            "description": "(`Forbidden`) You have all the necessary prerequisites, headers and tokens, but you are not authorized by the user to use this scope/action on their behalf.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          }
        },
        "operationId": "fetch-global-account",
        "parameters": [
          {
            "$ref": "../models/helpers/parameters/Client.json"
          },
          {
            "$ref": "../models/helpers/parameters/Signature.json"
          },
          {
            "$ref": "../models/helpers/parameters/Authority.json"
          }
        ],
        "tags": [
          "Find & List Accounts"
        ]
      },
      "parameters": [
        {
          "$ref": "../models/helpers/parameters/Record.json"
        }
      ],
      "patch": {
        "summary": "Update Stem Account",
        "operationId": "update-global-account",
        "parameters": [
          {
            "$ref": "../models/helpers/parameters/Client.json"
          },
          {
            "$ref": "../models/helpers/parameters/Signature.json"
          },
          {
            "$ref": "../models/helpers/parameters/Authority.json"
          }
        ],
        "tags": [
          "Find & List Accounts"
        ],
        "responses": {
          "200": {
            "description": "(`OK`) Your request was approved and all permissible non-read-only properties in the data were saved or changed in the database for the endpoint's data type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "304": {
            "description": "(`Not Modified`) You are authorized to perform this action on the users behalf, but you did not you didn't change anything or didn't include one or more writable properties.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "400": {
            "description": "(`Bad Request`) You are able to execute this action, but you didn't use the right property guide, or you are missing cruticial properties from the records you are referencing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "401": {
            "description": "(`Unauthorized`) You either, did not include the client id of your developer application, the encrypted signature of the request or a header with one or more user scope bearers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "403": {
            "description": "(`Forbidden`) You have all the necessary prerequisites, headers and tokens, but you are not authorized by the user to use this scope/action on their behalf.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/global/StemAccount.json"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "../models/global/StemAccount.json"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "../models/global/StemAccount.json"
              }
            }
          },
          "description": "Data blob containing changes to any properties that are not read-only; passed through the headers."
        }
      }
    },
    "/accounts/{record}/security": {
      "parameters": [
        {
          "$ref": "../models/helpers/parameters/Record.json"
        }
      ],
      "get": {
        "summary": "Fetch SA's Security",
        "responses": {
          "200": {
            "description": "(`OK`) Your request was approved, and all accessible data for your developer application's permissions was sent back to the querying client within the results property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "../models/global/uui/SecurityInformation.json"
                    },
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "400": {
            "description": "(`Bad Request`) You are able to execute this action, but you didn't use the right property guide, or you are missing cruticial properties from the records you are referencing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "401": {
            "description": "(`Unauthorized`) You either, did not include the client id of your developer application, the encrypted signature of the request or a header with one or more user scope bearers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          },
          "403": {
            "description": "(`Forbidden`) You have all the necessary prerequisites, headers and tokens, but you are not authorized by the user to use this scope/action on their behalf.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "../models/helpers/ServerErrorStatus.json",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "readOnly": true
                }
              }
            }
          }
        },
        "operationId": "get-global-account-security",
        "tags": [
          "Find Specific Account Data"
        ],
        "parameters": [
          {
            "$ref": "../models/helpers/parameters/Client.json"
          },
          {
            "$ref": "../models/helpers/parameters/Signature.json"
          },
          {
            "$ref": "../models/helpers/parameters/Authority.json"
          }
        ]
      }
    },
    "/accounts/query": {
      "get": {
        "summary": "Stem # From Field Query",
        "tags": [],
        "responses": {},
        "operationId": "get-accounts-query",
        "parameters": [
          {
            "$ref": "../models/helpers/parameters/Client.json"
          },
          {
            "$ref": "../models/helpers/parameters/Signature.json"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#Date"
              ],
              "example": "\"\""
            },
            "in": "query",
            "name": "forumCreated",
            "description": "When the users forum/website account was created. A UNIX format 10 to 13 digit timestamp, using the [Query Parameter Field Matching Format]()."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#Date"
              ]
            },
            "in": "query",
            "name": "forumLastActive",
            "description": "The last time they used the website or forums while being logged in. A UNIX format 10 to 13 digit timestamp, using the [Query Parameter Field Matching Format]()."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#String",
                "String"
              ],
              "example": "\"E@startsWith@Dragon,endsWith@Fire\", \"Mushroomz9_\""
            },
            "in": "query",
            "name": "username",
            "description": "Their stem username, optionally can be using the [Query Parameter Field Matching Format](). By not using characters inside the format, it will default to the matches exactly option."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#String",
                "String"
              ],
              "example": "\"E@startsWith@xX\", \"_PattyCakes_\""
            },
            "in": "query",
            "name": "minecraftName",
            "description": "Their Minecraft username, optionally can be using the [Query Parameter Field Matching Format](). By not using characters inside the format, it will default to the matches exactly option."
          },
          {
            "schema": {
              "type": "string",
              "example": "USETAG|E@startsWith@Dragon,endsWith@Fire|M@2399",
              "default": "USEINT|*",
              "enum": [
                "\"any\"",
                "QPFMF#Discord"
              ]
            },
            "in": "query",
            "name": "discord",
            "description": "The identifier snowflake or Tag Name#Number of the account holder, if connected. [Query Parameter Field Matching Format]()."
          },
          {
            "schema": {
              "type": "string",
              "default": "\"unset\"",
              "example": "\"https://cdn.kelpstone.com/v1/avatar/2839829182323/2839829182323.jpeg\"",
              "enum": [
                "\"any\"",
                "\"none\"",
                "QPFMF#CDN"
              ]
            },
            "in": "query",
            "name": "profilePicture",
            "description": "Either \"unset\" for no option (default), \"none\" for no profile picture/default avatar, a Kelpstone CDN number for a specific uploaded image match, or a url to a Kelpstone CDN or Imgur link."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#Date"
              ]
            },
            "in": "query",
            "name": "minecraftFirstJoin",
            "description": "A UNIX format 10 to 13 digit timestamp, using the [Query Parameter Field Matching Format]()."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#Date"
              ]
            },
            "in": "query",
            "name": "minecraftLastJoin",
            "description": "A UNIX format 10 to 13 digit timestamp, using the [Query Parameter Field Matching Format]()."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "\"any\"",
                "QPFMF#Date"
              ]
            },
            "in": "query",
            "name": "forumLastCommented",
            "description": "A UNIX format 10 to 13 digit timestamp, using the [Query Parameter Field Matching Format]()."
          },
          {
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ],
              "default": "false "
            },
            "in": "query",
            "name": "useHistory",
            "required": true,
            "description": "Wether to use the history of Mojang/Kelpstone name changes, discord reconnections, etc to evaluate matches. This does not apply to activity-related timestamp fields."
          },
          {
            "$ref": "../models/helpers/parameters/Authority.json"
          }
        ]
      }
    }
  }
}